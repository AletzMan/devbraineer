generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define los posibles tipos de publicaciones (Tus tipos preferidos)
enum PostType {
  Challenge // Reto técnico
  Question // Pregunta
  Resource // Recurso útil
  EventMeetup // Evento o meetup
  Poll // Encuesta
}

// Modelo de Usuario (User)
model User {
  id       String  @id @unique // ID de usuario de Clerk.
  email    String  @unique // Correo del usuario.
  username String? @unique // Nombre de usuario (Clerk permite username o email para login).

  profile Profile?
  posts   Post[] // <-- Relación a 'posts'

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users") // Mapea este modelo a una tabla llamada "users" en la base de datos.
}

// Modelo de Perfil (Profile)
model Profile {
  id     String @id @default(uuid()) // ID único para el perfil.
  userId String @unique // Clave foránea para el usuario (ID de Clerk).
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade) // Define la relación con el modelo User.

  avatar_url   String? // URL a la imagen del avatar (opcional).
  city         String? // Ciudad del usuario (opcional).
  country      String? // País del usuario (opcional).
  description  String?  @db.Text // Descripción/biografía del usuario (permite texto largo).
  technologies String[] // Array de Strings para tecnologías.

  created_at DateTime @default(now()) // Fecha y hora de creación del perfil.
  updated_at DateTime @updatedAt // Fecha y hora de la última actualización.

  @@map("profiles") // Mapea este modelo a una tabla llamada "profiles" en la base de datos.
}

// Modelo de Publicación (Ahora llamado Post)
model Post {
  id          String @id @default(uuid()) // ID único para la publicación.
  publisherId String // Clave foránea para el usuario que publicó.
  publisher   User   @relation(fields: [publisherId], references: [id], onDelete: Cascade) // Define la relación con el modelo User.

  type         PostType // Tipo de publicación (Reto, Pregunta, etc.)
  title        String // Título de la publicación.
  description  String   @db.Text // Descripción/contenido de la publicación.
  language     String? // Lenguaje de programación (opcional, para retos).
  code_snippet String?  @db.Text // Fragmento de código (opcional, para retos).
  url          String? // URL (opcional, para recursos/eventos).

  pollOptions String[] // Opciones de la encuesta (vacío si no es encuesta).

  created_at DateTime @default(now()) // <-- ¡Aquí están! Con @default(now())
  updated_at DateTime @updatedAt // <-- ¡Y aquí! Con @updatedAt

  @@map("posts") // <-- Mapeo explícito a la tabla 'posts'
}
