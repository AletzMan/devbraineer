generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuario (User) 
model User {
  id            String  @id @default(uuid()) // ID único, generado automáticamente como UUID.
  email         String  @unique // Correo electrónico, debe ser único.
  password_hash String? // Hash de la contraseña (opcional para logins sociales).
  username      String  @unique // Nombre de usuario único. 

  profile    Profile? // Relación uno-a-uno con Profile (un usuario puede tener un perfil).
  challenges Challenge[] // Relación uno-a-muchos con Challenge (un usuario puede publicar muchos retos).

  created_at DateTime @default(now()) // Fecha y hora de creación del usuario.
  updated_at DateTime @updatedAt // Fecha y hora de la última actualización.

  @@map("users") // Mapea este modelo a una tabla llamada "users" en la base de datos.
}

// Modelo de Perfil (Profile) 
model Profile {
  id     String @id @default(uuid()) // ID único para el perfil.
  userId String @unique // Clave foránea para el usuario, debe ser única (relación 1:1).
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade) // Define la relación con el modelo User.
  // onDelete: Cascade significa que si un usuario se elimina, su perfil también.

  avatar_url   String? // URL a la imagen del avatar (opcional).
  city         String? // Ciudad del usuario (opcional).
  country      String? // País del usuario (opcional).
  description  String?  @db.Text // Descripción/biografía del usuario (permite texto largo).
  technologies String[] // Array de Strings para tecnologías, se mapeará a JSONB en PostgreSQL.

  created_at DateTime @default(now()) // Fecha y hora de creación del perfil.
  updated_at DateTime @updatedAt // Fecha y hora de la última actualización.

  @@map("profiles") // Mapea este modelo a una tabla llamada "profiles" en la base de datos.
}

// Modelo de Reto (Challenge) 
model Challenge {
  id          String @id @default(uuid()) // ID único para el reto.
  publisherId String // Clave foránea para el usuario que publicó el reto.
  publisher   User   @relation(fields: [publisherId], references: [id], onDelete: Cascade) // Define la relación con el modelo User.
  // onDelete: Cascade significa que si el publicador se elimina, sus retos también.

  title        String // Título del reto.
  description  String @db.Text // Descripción detallada del reto (permite texto largo).
  language     String // Lenguaje de programación o tecnología del reto.
  code_snippet String @db.Text // Fragmento de código inicial del reto (permite texto largo).

  created_at DateTime @default(now()) // Fecha y hora de publicación del reto.
  updated_at DateTime @updatedAt // Fecha y hora de la última actualización.

  @@map("challenges") // Mapea este modelo a una tabla llamada "challenges" en la base de datos.
}
